
================================================================================
Message Types (defined in namespace NetMsgType protocol.h)

--------------------------------------------------------------------------------
VERSION 

Provides information about the transmitting node to the receiving node at the 
beginning of a connection.
https://bitcoin.org/en/developer-reference#version

Send: PushVersion
Recv: ProcessMessage
--------------------------------------------------------------------------------
VERACK

Acknowledges a previously-received VERSION message, informing the connecting 
node that it can begin to send other messages.
https://bitcoin.org/en/developer-reference#verack

Send: ProcessMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
ADDR

Relays connection information for peers on the network.

See: https://bitcoin.org/en/developer-reference#addr

Send: edcSendMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
GETADDR

Requests an ADDR message from the receiving node, preferably one with lots of IP 
addresses of other receiving nodes.

See: https://bitcoin.org/en/developer-reference#getaddr

Send: ProcessMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
INV

The inv message (inventory message) transmits one or more inventories of objects 
known to the transmitting peer. It can be sent unsolicited to announce new 
transactions or blocks, or it can be sent in reply to a getblocks message or 
mempool message.

See: https://bitcoin.org/en/developer-reference#inv

Send: ProcessGetData, edcSendMessage,
Recv: ProcessMessage
--------------------------------------------------------------------------------
GETDATA

The getdata message requests one or more data objects from another node. The 
objects are requested by an inventory, which the requesting node typically 
previously received by way of an inv message.

The response to a getdata message can be a tx message, block message, 
merkleblock message, or notfound message.

This message cannot be used to request arbitrary data, such as historic 
transactions no longer in the memory pool or relay set. Full nodes may not even 
be able to provide older blocks if they’ve pruned old transactions from their 
block database. For this reason, the getdata message should usually only be 
used to request data from a node which previously advertised it had that data 
by sending an inv message.

See: https://bitcoin.org/en/developer-reference#getdata

Send: ProcessMessage, edcSendMessages
Recv: ProcessMessage
--------------------------------------------------------------------------------
MERKLEBLOCK

A reply to a GETDATA message which requested a block using the inventory type.
MSG_MERKLEBLOCK.

See: https://bitcoin.org/en/developer-reference#merkleblock

Send: ProcessGetData
Recv: Not done
--------------------------------------------------------------------------------
GETBLOCKS

The getblocks message requests an inv message that provides block header hashes 
starting from a particular point in the block chain. It allows a peer which has 
been disconnected or started for the first time to get the data it needs to 
request the blocks it hasn’t seen.

See: https://bitcoin.org/en/developer-reference#getblocks

Send: Not Sent
Recv: ProcessMessage
--------------------------------------------------------------------------------
GETHEADERS

The getheaders message requests a headers message that provides block headers 
starting from a particular point in the block chain. It allows a peer which has 
been disconnected or started for the first time to get the headers it hasn’t 
seen yet.

The getheaders message is nearly identical to the getblocks message, with one 
minor difference: the inv reply to the getblocks message will include no more 
than 500 block header hashes; the headers reply to the getheaders message will 
include as many as 2,000 block headers.

See: https://bitcoin.org/en/developer-reference#getheaders

Send: ProcessMessage, edcSendMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
TX

The tx message transmits a single transaction in the raw transaction format. It 
can be sent in a variety of situations;

o Transaction Response: Bitcoin Core and BitcoinJ will send it in response to a 
  getdata message that requests the transaction with an inventory type of MSG_TX.

o MerkleBlock Response: Bitcoin Core will send it in response to a getdata 
  message that requests a merkle block with an inventory type of MSG_MERKLEBLOCK. 
  (This is in addition to sending a merkleblock message.) Each tx message in this 
  case provides a matched transaction from that block.

o Unsolicited: BitcoinJ will send a tx message unsolicited for transactions it 
  originates.

See: https://bitcoin.org/en/developer-reference#tx

Send: ProcessGetData
Recv: ProcessMessage
--------------------------------------------------------------------------------
HEADERS

Sends one or more block headers to a node which previously requested certain 
headers with a GETHEADERS message.

See: https://bitcoin.org/en/developer-reference#headers

Send: ProcessMessage, edcSendMessages
Recv: ProcessMessage
--------------------------------------------------------------------------------
BLOCK

The block message transmits a single serialized block in the format described in 
the serialized blocks section. See that section for an example hexdump. It can 
be sent for two different reasons:

o GetData Response: Nodes will always send it in response to a getdata message 
  that requests the block with an inventory type of MSG_BLOCK (provided the node 
  has that block available for relay).

o Unsolicited: Some miners will send unsolicited block messages broadcasting 
  their newly-mined blocks to all of their peers. Many mining pools do the same 
  thing, although some may be misconfigured to send the block from multiple 
  nodes, possibly sending the same block to some peers more than once.

See: https://bitcoin.org/en/developer-reference#block

Send: ProcessGetData
Recv: ProcessMessage
--------------------------------------------------------------------------------
MEMPOOL

The mempool message requests the TXIDs of transactions that the receiving node 
has verified as valid but which have not yet appeared in a block. That is, 
transactions which are in the receiving node’s memory pool. The response to the 
mempool message is one or more inv messages containing the TXIDs in the usual 
inventory format.

See: https://bitcoin.org/en/developer-reference#mempool

Send: Not sent
Recv: ProcessMessage
--------------------------------------------------------------------------------
PING

Sent periodically to help confirm that the receiving peer is still connected.

See: https://bitcoin.org/en/developer-reference#ping

Send: edcSendMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
PONG

Replies to a PING message, proving to the pinging node that the ponging node is 
still alive.

See: https://bitcoin.org/en/developer-reference#pong

Send: ProcessMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
NOTFOUND

The notfound message is a reply to a getdata message which requested an object 
the receiving node does not have available for relay. (Nodes are not expected to 
relay historic transactions which are no longer in the memory pool or relay set. 
Nodes may also have pruned spent transactions from older blocks, making them 
unable to send those blocks.)

See: https://bitcoin.org/en/developer-reference#notfound

Send: ProcessGetData
Recv: ProcessGetData
--------------------------------------------------------------------------------
FILTERLOAD

The filterload message tells the receiving peer to filter all relayed 
transactions and requested merkle blocks through the provided filter. This allows 
clients to receive transactions relevant to their wallet plus a configurable rate 
of false positive transactions which can provide plausible-deniability privacy.

See: https://bitcoin.org/en/developer-reference#filterload

Send: Not Sent
Recv: ProcessMessage
--------------------------------------------------------------------------------
FILTERADD

The filteradd message tells the receiving peer to add a single element to a 
previously-set bloom filter, such as a new public key. The element is sent 
directly to the receiving peer; the peer then uses the parameters set in the 
filterload message to add the element to the bloom filter.

Because the element is sent directly to the receiving peer, there is no 
obfuscation of the element and none of the plausible-deniability privacy 
provided by the bloom filter. Clients that want to maintain greater privacy 
should recalculate the bloom filter themselves and send a new filterload message 
with the recalculated bloom filter.

See: https://bitcoin.org/en/developer-reference#filteradd

Send: Not Sent
Recv: ProcessMessage
--------------------------------------------------------------------------------
FILTERCLEAR

The filterclear message tells the receiving peer to remove a previously-set 
bloom filter. This also undoes the effect of setting the relay field in the 
version message to 0, allowing unfiltered access to inv messages announcing new 
transactions.

See: https://bitcoin.org/en/developer-reference#filterclear

Send: Not Sent
Recv: ProcessMessage
--------------------------------------------------------------------------------
REJECT

Informs the receiving node that one of its previous messages has been rejected.

See: https://bitcoin.org/en/developer-reference#reject

Send: ProcessMessage, edcProcessMessages, edcSendMessages
Recv: ProcessMessage
--------------------------------------------------------------------------------
SENDHEADERS

Indicates that a node prefers to receive new block announcements via a HEADERS 
message rather than an "inv".

See: https://bitcoin.org/en/developer-reference#sendheaders

Send: ProcessMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
FEEFILTER

Tells the receiving peer not to inv us any txs which do not meet the specified 
min fee rate.

Send: edcSendMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
SENDCMPCT

Requests a block in a compact form.

Send: MaybeSetPeerAsAnnouncingHeaderAndIDs, ProcessMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
CMPCTBLOCK

Block data in a compact form.

Send: ProcessGetData
	  edcSendMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
GETBLOCKTXN

Requests a BLOCKTXN message

Send: ProcessMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
BLOCKTXN

Message contains txns for a specific block.

Send: ProcessMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------
USER
Sends user message to peers.

Send: edcSendMessage
Recv: ProcessMessage
--------------------------------------------------------------------------------

================================================================================

--------------------------------------------------------------------------------
HTTP Server	(edchttpserver.[cpp,h])
--------------------------------------------------------------------------------
Node P2P:

edcConnectNode 					(edcnet.cpp)
edcFindNode						(edcnet.cpp)
CEDCNode::PushVersion()			(edcnet.cpp)
CEDCNode::ReceiveMsgBytes()		(edcnet.cpp)
SocketSendData					(edcnet.cpp)
edcThreadMessageHandler			(edcnet.cpp)
edcStartNode					(edcnet.cpp)
edcStopNode						(edcnet.cpp)
RelayTransaction				(edcnet.cpp)
CEDCNode::BeginMessage			(edcnet.cpp)
CEDCNode::EndMessage			(edcnet.cpp)
edcSendMessages					(edcmain.cpp)
edcProcessMessages				(edcmain.cpp)

edcStartNode
	-> edcThreadMessageHandler
		-> edcSendMessages
		-> edcProcessMessages
			-> ProcessMessage
				-> ProcessGetData
			-> ProcessGetData

ProcessGetData				BLOCK, MERKLEBLOCK, TX, INV, *, NOTFOUND
CEDCNode::PushVersion		VERSION
	-> PushMessage
ProcessMessage				REJECT, VERACK, GETADDR, SENDHEADERS, 
							GETHEADERS, GETDATA, HEADERS, PONG
edcProcessMessages			REJECT, PING, ADDR, GETHEADERS, HEADERS, INV, 
							GETDATA, FEEFILTER
	CEDCNode::PushMessage
		-> CEDCNode::EndMessage
			-> SocketSendData ==> socket send

edcThreadSocketHandler	==> socket recv
ConnectThroughProxy
	-> Socks5
		-> InterruptibleRecv	==> socket recv
	
theApp.vNodes()	- list of nodes to be communicated with

CEDCNode::vSendMsg		Send message deque	(SocketSendData consumes queue. 
						EndMessage pushes messages onto queue)
CEDCNode::vRecvMsg		Recv message deque	(processed by edcProcessMessages)
CEDCNode::vRecvGetData	Recv GetData deque	(processed by ProcessGetData)
