------------------------------------------------------------------------------
clone EDC Core source:
------------------------------------------------------------------------------

git clone https://github.com/Equibit/EDC-core.git
userid: dcauz (or cauz.david@gmail.com)

------------------------------------------------------------------------------
clone BitMessage:
------------------------------------------------------------------------------

git clone https://github.com/Bitmessage/PyBitmessage.git

------------------------------------------------------------------------------
clone Bitcoin:
------------------------------------------------------------------------------

git clone https://github.com/bitcoin/bitcoin.git
cd bitcoin/
./autogen.sh
./configure --disable-wallet --without-gui --without-miniupnpc
make check

------------------------------------------------------------------------------
File editing process:
------------------------------------------------------------------------------

1) Edit the file (add/change)
2) git add <list-of-edited-files>
3) git commit
4) git push

------------------------------------------------------------------------------
Port Forwarding
------------------------------------------------------------------------------

From browser, go to 192.168.0.1

login : user cusadmin pwd: jan301961

External ip is "WAN IP Address" on Status page

Go to Basic page => Port Forwarding

Add new row:

1)	Application: equibitd
	Public:  18331~18331
	Private:  18331~18331
	Protocol: TCP
	Local IP Address: Address of machine running core
	Remote IP Address: Any

2)	Application: bitcoind
	Public:  18332~18332
	Private:  18332~18332
	Protocol: TCP
	Local IP Address: Address of machine running core
	Remote IP Address: Any

3) Save Changes

------------------------------------------------------------------------------
Generate EC key pair
------------------------------------------------------------------------------
/usr/bin/openssl ecparam -genkey -name secp256k1 | /usr/bin/openssl ec -out ec.key -aes128

------------------------------------------------------------------------------
Generate Self signed certificate
------------------------------------------------------------------------------
/usr/bin/openssl req -new -x509 -days 365 -key ec.key -out ec.crt

------------------------------------------------------------------------------
Generate Signing request
------------------------------------------------------------------------------
/usr/bin/openssl req -new -key ec.key -out ec.csr

------------------------------------------------------------------------------
Sign certificate
------------------------------------------------------------------------------
/usr/bin/openssl ca -config edc.openssl.conf -in ec.csr -out ec.crt -extensions ssl_ext

------------------------------------------------------------------------------
Examine the certificate
------------------------------------------------------------------------------

/usr/bin/openssl x509 -text -in fd.crt -noout

------------------------------------------------------------------------------
Creating a private CA
------------------------------------------------------------------------------

1) Create openssl configuration file such as ../sample/openssl/edc.openssl.conf

2) Create directory structure:

$ mkdir root-ca
$ cd root-ca
$ mkdir certs db private
$ chmod 700 private
$ touch db/index
$ openssl rand -hex 16 > db/serial
$ echo 1001 > db/crlnumber

3) Create key and csr file

$ openssl req -new -config edc.openssl.conf -out root-ca.csr -keyout private/root-ca.key
$ openssl req -new -key private/root-ca.key -out root-ca.csr

4) Create self signed certificate

$ touch db/index
$ openssl ca -selfsign -config edc.openssl.conf -in root-ca.csr -out root-ca.crt -extensions ca_ext

5) Sign a certificate

$ openssl ecparam -genkey -name secp256k1 | /usr/bin/openssl ec -out ec.key -aes128
$ openssl req -new -key ec.key -out ec.csr
$ openssl ca -config edc.openssl.conf -in ec.csr -out ec.crt -extensions ssl_ext

------------------------------------------------------------------------------
Compile and install newest version (currently 1.1.x) of OpenSSL in Ubuntu
------------------------------------------------------------------------------
cd
sudo DEBIAN_FRONTEND=noninteractive apt-get update
sudo DEBIAN_FRONTEND=noninteractive apt-get --yes --force-yes install checkinstall build-essential
sudo DEBIAN_FRONTEND=noninteractive apt-get --yes --force-yes build-dep openssl
sudo rm -rf ~/openssl
git clone https://github.com/openssl/openssl.git
cd openssl
sudo ./config
sudo make
sudo make test
sudo checkinstall
sudo rm -rf ~/openssl
sudo mv /usr/bin/c_rehash /usr/bin/c_rehashBACKUP
sudo mv /usr/bin/openssl /usr/bin/opensslBACKUP
sudo ln -s /usr/local/bin/c_rehash /usr/bin/c_rehash
sudo ln -s /usr/local/bin/openssl /usr/bin/openssl
openssl version
apt-cache show openssl

------------------------------------------------------------------------------
Working with .iso files
------------------------------------------------------------------------------
sudo mkdir /media/iso (or /media/isoN)
sudo mount -o loop PATH/file.iso /media/iso

- contents are located at /media/iso

sudo unmount /media/iso


